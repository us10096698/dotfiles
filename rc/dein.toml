[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = 'make'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'gregsexton/MatchTag'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neocomplete'
hook_add='''
  let g:acp_enableAtStartup = 0
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  inoremap <expr><C-g> neocomplete#undo_completion()
  inoremap <expr><C-l> neocomplete#complete_common_string()
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction
 inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
 inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
 inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

 " Enable omni completion.
 autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
 autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
 autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
 autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

 if has('python3')
   autocmd FileType python setlocal omnifunc=python3complete#Complete
 else
   autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
 endif

 if !exists('g:neocomplete#sources#omni#input_patterns')
   let g:neocomplete#sources#omni#input_patterns = {}
 endif

 "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
 "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
 "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add='''
  " let g:neosnippet#snippets_directory = '~/.dotfiles/snip'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)": "\<TAB>"
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  nnoremap <silent> <C-p> :PrevimOpen<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert = 1
  let g:unite_source_file_mru_limit = 200

  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_rec_async_command =
      \ ['ag', '--follow', '--nocolor', '--nogroup',
      \  '--hidden', '-g', '']
  endif

  nnoremap [unite] <Nop>
  nmap <Space>u [unite]

  nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
  nnoremap <silent> [unite]g :<C-u>Unite -buffer-name=gitfiles file_rec/git<CR>
  nnoremap <silent> [unite]f :<C-u>Unite -buffer-name=files file_rec/async<CR>
  nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
  nnoremap <silent> [unite]bm :<C-u>Unite bookmark<CR>
  nnoremap <silent> [unite]ba :<C-u>UniteBookmarkAdd<CR>
  nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_ignore_pattern = []

  nnoremap [filer] <Nop>
  nmap <Space>f [filer]

  nnoremap <silent> [filer]i :<C-u>VimFilerBufferDir<CR>
  nnoremap <silent> [filer]e :<C-u>VimFilerBufferDir -split -simple -winwidth=25 -no-quit<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let NERDSpaceDelims = 1
  nmap ,, <Plug>NERDCommenterToggle
  vmap ,, <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']
hook_add = '''
  let g:user_emmet_expandabbr_key = '<C-g>'
'''

# [[plugins]]
# repo = 'scrooloose/syntastic'
# hook_add = '''
   #let g:syntastic_javascript_checkers=['eslint']
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  set diffopt+=vertical

  nnoremap [fugitive] <Nop>
  nmap <Space>g [fugitive]

  nnoremap <silent> [fugitive]s :<C-u>Gstatus<CR>
  nnoremap <silent> [fugitive]w :<C-u>Gwrite<CR>
  nnoremap <silent> [fugitive]r :<C-u>Gread<CR>
  nnoremap <silent> [fugitive]d :<C-u>Gdiff<CR>
  nnoremap <silent> [fugitive]c :<C-u>Gcommit<CR>
  nnoremap <silent> [fugitive]b :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'
hook_add='''
  if executable('ag')
    nnoremap [ag] <Nop>
    nmap <Space>a [ag]
    nnoremap <silent> [ag] :<C-u>Ag<CR>
  endif
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  vmap <CR> <Plug>(EasyAlign)
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
  let g:jedi#completions_command="<C-L>"
  let g:jedi#popup_on_dot=0
  let g:jedi#popup_select_first=0
  autocmd FileType python setlocal completeopt-=preview
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set t_Co=256
  syntax enable
  set background=dark
  au reset_au_group VimEnter * nested colorscheme hybrid
'''

